import tkinter as tk
from tkinter import ttk
from tkinter import *
from tkinter import messagebox
import urllib.request
import matplotlib
matplotlib.use('TkAgg')
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg, NavigationToolbar2Tk
from matplotlib.figure import Figure
import matplotlib.pyplot as plt
import ipaddress
import requests
import json
import csv

LARGE_FONT = ("Verdana", 12)


class Base(tk.Tk):

    # Honeypot Analysis Main GUI Function
    def __init__(self, *args, **kwargs):
        tk.Tk.__init__(self, *args, **kwargs)
        tk.Tk.wm_title(self, "Python Honeypot Analysis Tool")

        container = tk.Frame(self)
        container.pack(side="top", fill="both", expand=True)
        container.grid_rowconfigure(0, weight=1)
        container.grid_columnconfigure(0, weight=1)

        self.frames = {}
        for F in (HATAnalysis, GraphPage):
            frame = F(container, self)
            self.frames[F] = frame
            frame.grid(row=0, column=0, sticky="nsew")

        self.show_frame(HATAnalysis)

    def show_frame(self, cont):
        frame = self.frames[cont]
        frame.tkraise()


class HATAnalysis(tk.Frame):

    def __init__(self, parent, controller):
        tk.Frame.__init__(self, parent)
        label = tk.Label(self, text="Analysis Page", font=LARGE_FONT)
        label.pack(pady=10, padx=10)

        # Initialize the Text File box
        self.svr = Entry(self, textvariable="text")
        self.svr.setvar(name="text", value='log.txt')
        self.svr.grid(row=0, column=1, sticky=W)

        # Create label for Text File box
        lbl = Label(self, text="Text File from Honeypot:")
        lbl.grid(row=0, column=0, sticky=W)

        # Create button to activate the port scanner
        btn = Button(self, text="Start Analysis", command=self.ipanalysis)
        btn.grid(row=3, column=1, sticky=W)

        # Create button to enter the About page
        btn2 = Button(self, text="   About  ", command=self.about)
        btn2.grid(row=4, column=0, sticky=W)

        # Create button to exit the program
        btn3 = Button(self, text="   Exit   ", command=quit)
        btn3.grid(row=4, column=1, sticky=W)

        # Create button to make a graph
        btn4 = Button(self, text="   Graph  ",
                      command=lambda: controller.show_frame(GraphPage))
        btn4.grid(row=5, column=0, sticky=W)

        # Initialize the size of the window
        self.txt = Text(gui, width=50, height=25, wrap=WORD)
        self.txt.grid(row=6, column=0, columnspan=2, sticky=W)

        self.txt.insert(1.0, 'IP Data Processed:\n')
        self.txt.insert(2.0, '-----------------------------\n')

    # Port Scanner About Page GUI Function
    def about(self):
        # Initialize TkInter Window/Frame
        about = Tk()

        # Make window size static
        about.resizable(width=False, height=False)

        # Initialize the size of the window
        self.txt = Text(about, width=35, height=15, wrap=WORD)
        self.txt.grid(row=1, column=0, columnspan=2, sticky=W)

        # Set title of window
        about.title('About - Python H.A.T.')
        self.txt.insert(1.0, 'Made By: Jacob Jolly & Vedant Singhania\n')
        self.txt.insert(2.0, '-------------------------\n\n')
        self.txt.insert(3.0, 'This analysis tool takes in a text file generated '
                             'by the Honeypot to process the IP data from attacks '
                             'made to it and generates geographical data and '
                             'clustering data to show the user where attacks '
                             'are coming from.\n\n')
        self.txt.insert(5.0, 'INSTRUCTIONS:\n'
                             '1.) This tool PY file is located in the same location as the log file.\n')

        # Show GUI window
        about.mainloop()

    # Port Scanner About Page GUI Function
    """
    def graph(self):
        # Initialize TkInter Window/Frame
        graph = Tk()

        # Make window size static
        #graph.resizable(width=False, height=False)

        # Set title of window
        graph.title('Python H.A.T. - Graph Page')

        f = Figure(figsize=(5, 5), dpi=100)
        a = f.add_subplot(111)
        a.plot([1, 2, 3, 4, 5, 6, 7, 8], [5, 6, 1, 3, 8, 9, 3, 5])

        canvas = FigureCanvasTkAgg(f, self)
        canvas.draw()
        canvas.get_tk_widget().pack(side=Tk.TOP, fill=Tk.BOTH, expand=True)

        toolbar = NavigationToolbar2Tk(canvas, self)
        toolbar.update()
        canvas._tkcanvas.pack()

        # Show GUI window
        graph.mainloop()
    """
    # Latitude/Longitude Function to find Geo location from IP Addresses using FreeGeoIP web service
    def getGeoData(self, apikey, ip_list=[], lats=[], lons=[], countries=[], regions=[]):
        # Go through IP list and request information about them from FreeGeoIP
        for ip in ip_list:
            r = requests.get("http://api.ipstack.com/" + ip + "?access_key=" + apikey)
            json_response = r.json()
            print("{ip}, {region_name}, {country_name}, {latitude}, {longitude}".format(**json_response))

            # Parse the JSON data into needed parts
            if json_response['latitude'] and json_response['longitude']:
                lats.append(json_response['latitude'])
                lons.append(json_response['longitude'])
            if json_response['country_name'] and json_response['region_name']:
                countries.append(json_response['country_name'])
                regions.append(json_response['region_name'])

        return lats, lons, countries, regions

    def plotTimeData(self, times):
        # Plot Data based on time of day
        bins = []
        plt.hist(times, bins, histtype='bar', rwidth=0.8)

        plt.xlabel('x')
        plt.ylabel('y')
        plt.title('Honeypot Hits by Time of Day')
        plt.legend()
        plt.show()

    def plotUserData(self, users):
        # Plot Data based on top 10 usernames
        bins = []
        plt.hist(users, bins, histtype='bar', rwidth=0.8)

        plt.xlabel('x')
        plt.ylabel('y')
        plt.title('Honeypot Hits by Username')
        plt.legend()
        plt.show()

    def plotPassData(self, passes):
        # Plot Data based on top 10 Passwords
        bins = []
        plt.hist(passes, bins, histtype='bar', rwidth=0.8)

        plt.xlabel('x')
        plt.ylabel('y')
        plt.title('Honeypot Hits by Passwords')
        plt.legend()
        plt.show()

    def plotLocData(self, locs):
        # Plot Data based on locations
        bins = []
        plt.hist(locs, bins, histtype='bar', rwidth=0.8)

        plt.xlabel('x')
        plt.ylabel('y')
        plt.title('Honeypot Hits by Passwords')
        plt.legend()
        plt.show()

    # IP Analyzer Function
    def ipanalysis(self):
        text = self.svr.get()
        IPAdds = []; IPCluData = []; IPTimes = []; IPPages = []
        IPAgent = []; IPUser = []; IPPass = []
        APIKey = "6cec2419ee3377ca5124db685feeed1c"

        with open(text, "r") as f:
            # Read in file line by line and add IP addresses to arrays
            for line in f:
                IPTimes.append(line.split(',')[0])
                IPAdds.append(line.split(',')[1])
                IPPages.append(line.split(',')[2])
                #IPAgent.append(line.split(',')[3])
                #IPUser.append(line.split(',')[4])
                #IPPass.append(line.split(',')[5])

                # Add ip address into array to be clustered together
                IPCluData.append(int(ipaddress.ip_address(line.split(',')[1])))

            f.close()

        # Put Latitude, Longitude, Country, and Region into arrays
        IPLats, IPLons, IPCouns, IPRegs = self.getGeoData(APIKey, IPAdds)

        for i in range(0, len(IPAdds)):
            print('IP: ', IPAdds[i], '  Country: ', IPCouns[i], '  Region: ', IPRegs[i])
            msg = "IP: " + str(IPAdds[i]) + "  Country: " + str(IPCouns[i]) + "  Region: " + str(IPRegs[i]) + "\n\n"
            self.txt.insert(3.0, msg)

        # When Analysis is done, pop up window displays 'Analysis Completed'
        messagebox.showinfo(title="Python H.A.T.", message="Analysis Completed")


class GraphPage(tk.Frame):

    def __init__(self, parent, controller):
        tk.Frame.__init__(self, parent)
        label = tk.Label(self, text="Python H.A.T. - Graph Page", font=LARGE_FONT)
        label.pack(pady=10, padx=10)

        f = Figure(figsize=(5, 5), dpi=100)
        a = f.add_subplot(111)
        a.plot([1, 2, 3, 4, 5, 6, 7, 8], [5, 6, 1, 3, 8, 9, 3, 5])

        canvas = FigureCanvasTkAgg(f, self)
        canvas.draw()
        canvas.get_tk_widget().pack(side=Tk.TOP, fill=Tk.BOTH, expand=True)

        toolbar = NavigationToolbar2Tk(canvas, self)
        toolbar.update()
        canvas._tkcanvas.pack()


# Initialize new Analysis Tool Window
app = Base()
app.mainloop()